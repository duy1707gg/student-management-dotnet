@model IEnumerable<student_management_dotnet.Models.Class>

@{
    ViewData["Title"] = "Classes";
}

<div class="container mx-auto px-4 py-8">
    <!-- Display success message if available -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-4 rounded" role="alert">
            <p>@TempData["SuccessMessage"]</p>
        </div>
    }

    <!-- Display error message if available -->
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4 rounded" role="alert">
            <p>@TempData["ErrorMessage"]</p>
        </div>
    }

    <div class="flex justify-between items-center mb-6">
        <div class="flex items-center space-x-4">
            <h1 class="text-3xl font-bold text-gray-800">Classes</h1>
            @if (User.IsInRole("Admin"))
            {
                <a href="@Url.Action("PendingGrading", "Reports")" 
                   class="bg-yellow-500 hover:bg-yellow-600 text-white font-semibold py-2 px-4 rounded shadow transition duration-150 ease-in-out">
                    <i class="fas fa-clipboard-check mr-2"></i> View Pending Reports
                </a>
            }
        </div>
        @if (User.IsInRole("Admin"))
        {
            <a asp-action="Create" class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded shadow transition duration-150 ease-in-out">
                <i class="fas fa-plus mr-2"></i> Create New
            </a>
        }
    </div>

    <div class="bg-white shadow-md rounded-lg overflow-hidden">
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            @Html.DisplayNameFor(model => model.ClassName)
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            @Html.DisplayNameFor(model => model.Course.CourseName)
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            @Html.DisplayNameFor(model => model.TeacherName)
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Students
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            @Html.DisplayNameFor(model => model.StartDate)
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            @Html.DisplayNameFor(model => model.Status)
                        </th>
                        <th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Actions
                        </th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var item in Model) {
                        <tr class="hover:bg-gray-50">
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                @Html.DisplayFor(modelItem => item.ClassName)
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                @Html.DisplayFor(modelItem => item.Course.CourseName)
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                @Html.DisplayFor(modelItem => item.TeacherName)
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                <span class="@(item.CurrentStudents >= item.MaxStudents ? "text-red-600" : "text-green-600")">
                                    @item.CurrentStudents / @item.MaxStudents
                                </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                @item.StartDate.ToString("MMM dd, yyyy")
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                @{
                                    string statusClass = item.Status switch
                                    {
                                        "Open" => "bg-green-100 text-green-800",
                                        "Closed" => "bg-red-100 text-red-800",
                                        "Cancelled" => "bg-gray-100 text-gray-800",
                                        _ => "bg-blue-100 text-blue-800"
                                    };
                                }
                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full @statusClass">
                                    @item.Status
                                </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
                                <div class="flex justify-center space-x-3">
                                    <a asp-action="Details" asp-route-id="@item.ClassId" 
                                       class="bg-indigo-100 hover:bg-indigo-200 text-indigo-700 py-1 px-3 rounded-md inline-flex items-center transition-colors duration-150" 
                                       title="View Details">
                                        <i class="fas fa-eye mr-1"></i> Details
                                    </a>

                                    @if (User.IsInRole("Student"))
                                    {
                                        <a href="@Url.Action("Create", "Reports", new { classId = item.ClassId })" 
                                           class="bg-green-100 hover:bg-green-200 text-green-700 py-1 px-3 rounded-md inline-flex items-center transition-colors duration-150"
                                           title="Submit Report">
                                            <i class="fas fa-file-upload mr-1"></i> Submit Report
                                        </a>
                                    }

                                    @if (User.IsInRole("Admin") || User.IsInRole("Teacher"))
                                    {
                                        <a href="@Url.Action("ClassStatistics", "Grade", new { id = item.ClassId })" 
                                           class="bg-purple-100 hover:bg-purple-200 text-purple-700 py-1 px-3 rounded-md inline-flex items-center transition-colors duration-150"
                                           title="View Reports">
                                            <i class="fas fa-chart-bar mr-1"></i> Reports
                                        </a>
                                        <a asp-action="Edit" asp-route-id="@item.ClassId" 
                                           class="bg-blue-100 hover:bg-blue-200 text-blue-700 py-1 px-3 rounded-md inline-flex items-center transition-colors duration-150" 
                                           title="Edit Class">
                                            <i class="fas fa-edit mr-1"></i> Edit
                                        </a>
                                        <a asp-action="Delete" asp-route-id="@item.ClassId" 
                                           class="bg-red-100 hover:bg-red-200 text-red-700 py-1 px-3 rounded-md inline-flex items-center transition-colors duration-150" 
                                           title="Delete Class" 
                                           onclick="return confirm('Are you sure you want to delete this class?');">
                                            <i class="fas fa-trash mr-1"></i> Delete
                                        </a>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Edit Modal -->
<div id="editModal" class="fixed inset-0 z-50 hidden overflow-auto bg-black bg-opacity-50 flex items-center justify-center">
    <div class="bg-white rounded-lg shadow-xl max-w-3xl w-full max-h-screen overflow-y-auto">
        <div class="p-6" id="editModalContent">
            <!-- Content will be loaded here via AJAX -->
            <div class="flex justify-center">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
            </div>
        </div>
    </div>
</div>

<!-- Details Modal -->
<div id="detailsModal" class="fixed inset-0 z-50 hidden overflow-auto bg-black bg-opacity-50 flex items-center justify-center">
    <div class="bg-white rounded-lg shadow-xl max-w-3xl w-full max-h-screen overflow-y-auto">
        <div class="p-6" id="detailsModalContent">
            <!-- Content will be loaded here via AJAX -->
            <div class="flex justify-center">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Get all detail links
            document.querySelectorAll('a[asp-action="Details"]').forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const url = this.getAttribute('href');
                    
                    // Show the modal
                    const modal = document.getElementById('detailsModal');
                    modal.classList.remove('hidden');
                    
                    // Fetch the details content
                    fetch(url)
                        .then(response => response.text())
                        .then(html => {
                            document.getElementById('detailsModalContent').innerHTML = html;
                            
                            // Add close button event listener
                            document.querySelectorAll('#detailsModalContent .close-modal').forEach(btn => {
                                btn.addEventListener('click', function() {
                                    modal.classList.add('hidden');
                                });
                            });
                        })
                        .catch(error => {
                            document.getElementById('detailsModalContent').innerHTML = `
                                <div class="bg-red-100 text-red-700 p-4 rounded mb-4">
                                    <p>Error loading details: ${error.message}</p>
                                </div>
                                <button class="close-modal px-4 py-2 bg-gray-200 text-gray-700 rounded-md">Close</button>
                            `;
                        });
                });
            });
            
            // Get all edit links
            document.querySelectorAll('a[asp-action="Edit"]').forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const url = this.getAttribute('href');
                    
                    // Show the modal
                    const modal = document.getElementById('editModal');
                    modal.classList.remove('hidden');
                    
                    // Fetch the edit form content
                    fetch(url)
                        .then(response => response.text())
                        .then(html => {
                            document.getElementById('editModalContent').innerHTML = html;
                            
                            // Add form submission handler for the edit form
                            const form = document.querySelector('#editModalContent form');
                            if (form) {
                                form.addEventListener('submit', function(e) {
                                    e.preventDefault();
                                    
                                    const formData = new FormData(form);
                                    
                                    fetch(form.action, {
                                        method: 'POST',
                                        body: formData,
                                        headers: {
                                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                                        }
                                    })
                                    .then(response => {
                                        if (response.redirected) {
                                            window.location.href = response.url;
                                        } else {
                                            return response.text();
                                        }
                                    })
                                    .then(html => {
                                        if (html) {
                                            document.getElementById('editModalContent').innerHTML = html;
                                        }
                                    })
                                    .catch(error => {
                                        document.getElementById('editModalContent').innerHTML = `
                                            <div class="bg-red-100 text-red-700 p-4 rounded mb-4">
                                                <p>Error submitting form: ${error.message}</p>
                                            </div>
                                            <button class="close-modal px-4 py-2 bg-gray-200 text-gray-700 rounded-md">Close</button>
                                        `;
                                    });
                                });
                            }
                            
                            // Add close button event listener
                            document.querySelectorAll('#editModalContent .close-modal, #editModalContent a[asp-action="Index"]').forEach(btn => {
                                btn.addEventListener('click', function(e) {
                                    e.preventDefault();
                                    modal.classList.add('hidden');
                                });
                            });
                        })
                        .catch(error => {
                            document.getElementById('editModalContent').innerHTML = `
                                <div class="bg-red-100 text-red-700 p-4 rounded mb-4">
                                    <p>Error loading form: ${error.message}</p>
                                </div>
                                <button class="close-modal px-4 py-2 bg-gray-200 text-gray-700 rounded-md">Close</button>
                            `;
                        });
                });
            });
            
            // Close modal when clicking outside of it
            document.querySelectorAll('#editModal, #detailsModal').forEach(modal => {
                modal.addEventListener('click', function(e) {
                    if (e.target === this) {
                        this.classList.add('hidden');
                    }
                });
            });
            
            // Close modal with Escape key
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    document.querySelectorAll('#editModal, #detailsModal').forEach(modal => {
                        modal.classList.add('hidden');
                    });
                }
            });
        });
    </script>
}